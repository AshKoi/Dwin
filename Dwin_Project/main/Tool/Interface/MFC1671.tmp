/******************************************************************************************************
* 2013-2014 益邦科技有限公司
* 文件名: 
* 创建人: 王一凡
* 日　期: 2013/09/21
* 修改人: 
* 日　期: 
* 描　述: 
* 版　本: Version 1.0  终端单板程序
*****************************************************************************************************/
#include "Login.h"
#include "Base.h"
#include "ChkCrc.h"
#include "SysRes.h"
#include "FileTrans.h"
#include "Fun.h"
#include "Gw3761.h"
#include "Guimenu.h"
#include "rmotlink.h"
#include "Key.h"
#include "AutoTest.h"

/**************************************************************************************************
                                           相关全局变量实现
***************************************************************************************************/


INT8U       g_nIoBuf[3]     = {0};      //IO口状态
INT8U       g_nIoSetFlg     = 0;
INT8U       g_nPlusCnt      = 0;
INT8U       g_nPlusValue    = 0;
INT8U       g_nKeyValue     = 0;

INT8U       g_nKeyTestFlg   = 1;


#define         STEP_END        2//10
/*
*****************************************************************************
* 函数名: Gw3761LoginF1Proc
* 输　入: 

* 输  出: 
* 返  回: 
*		0成功，-1失败
*		
*		
* 功  能: 
*****************************************************************************
*/
static INT32S Gw3761LoginF1Proc(INT8U* pRcv, INT32S nRcvlen, INT8U* pSnd, INT32S nSndlen)
{
	INT32S		    nRet		= 0;
    INT8U           nCmd        = 0;

	if ((NULL == pRcv) || (NULL == pSnd))
	{
		return -1;
	}
	if (nSndlen < 1)
	{
		return -1;
	}
    nCmd = *pRcv;
    
    
    pSnd[nRet++] = 1;
    if (nCmd == 1)              //启动自检
    {
        g_nTestStep = 0;
        memset(&g_nErrBuf[0], 0, 2);
        g_nAutoTestFlg = 1;
    }
    else if (nCmd == 2)         //查询状态命令
    {
        pSnd[nRet++] = g_nTestStep;
        memcpy(&pSnd[nRet], &g_nErrBuf[0], 2);
        nRet += 2;
    }
    else if (nCmd == 3)         //置高输出口线
    {
        SetIoStatus();
        g_nIoSetFlg = 1;
    }
    else if (nCmd == 4)         //置低输出口线
    {
        ClrIoStatus();
        g_nIoSetFlg = 2;
    }
    else if (nCmd == 5)         //读取输出口线
    {
        RdOutIoStatus();
        memcpy(&pSnd[nRet],&g_nIoBuf[0], 3);
        nRet += 3;
    }   
    else if (nCmd == 6)         //读取输入口线
    {
        RdInIoStatus();
        memcpy(&pSnd[nRet],&g_nIoBuf[0], 3);    
        nRet += 3;
    }
    else if (nCmd == 7)         //使脉冲处于接收状态、清空原有值
    {
        
    }
    else if (nCmd == 8)         //读取脉冲
    {
        if (g_nPlusCnt >= 2)
        {
            g_nPlusCnt = 0;
        }
        g_nPlusCnt++;
        PlusProc();
        nRet += 1;
    }

    else if (nCmd == 9)
    {
        g_nKeyValue = 0;
        g_nKeyTestFlg = 1;
    }
    
    else if (nCmd == 0x10)
    {
        pSnd[nRet++] = g_nKeyValue;
    }
    
	return nRet;	
}

/*
*****************************************************************************
* 函数名: Gw3761LoginF2Proc
* 输　入: 

* 输  出: 
* 返  回: 
*		0成功，-1失败
*		
*		
* 功  能: 
*****************************************************************************
*/
static INT32S Gw3761LoginF2Proc(INT8U* pRcv, INT32S nRcvlen, INT8U* pSnd, INT32S nSndlen)
{
	INT32S		nRet		= 0;
    INT8U       nBuf[3]     = {0};

	if ((NULL == pRcv) || (NULL == pSnd))
	{
		return -1;
	}
	if (nSndlen < 2)
	{
		return -1;
	}
    
	//读取电压值
    memcpy(&pSnd[0], &nBuf[0], 3);
    nRet += 3;

	return nRet;	
}

/*
*****************************************************************************
* 函数名: Gw3761LoginF3Proc
* 输　入: 

* 输  出: 
* 返  回: 
*		0成功，-1失败
*		
*		
* 功  能: 
*****************************************************************************
*/
static INT32S Gw3761LoginF3Proc(INT8U* pRcv, INT32S nRcvlen, INT8U* pSnd, INT32S nSndlen)
{
	INT32S		nRet		= 0;
    INT8U       nCmd        = 0;

	if ((NULL == pRcv) || (NULL == pSnd))
	{
		return -1;
	}
	if (nSndlen < 2)
	{
		return -1;
	}
    
    nCmd = *pRcv;
    if (0 == nCmd)
    {
        //置高输入口线
    }
    else
    {
        //置低输入口线
    }
    pSnd[nRet++] = 0;

	return nRet;	
}

/*
*****************************************************************************
* 函数名: Gw3761LoginF4Proc
* 输　入: 

* 输  出: 
* 返  回: 
*		0成功，-1失败
*		
*		
* 功  能: 
*****************************************************************************
*/
static INT32S Gw3761LoginF4Proc(INT8U* pRcv, INT32S nRcvlen, INT8U* pSnd, INT32S nSndlen)
{
	INT32S		nRet		= 0;
    INT8U       nNum        = 0;

	if ((NULL == pRcv) || (NULL == pSnd))
	{
		return -1;
	}
	if (nSndlen < 2)
	{
		return -1;
	}
    
    nNum = *pRcv;  //发送脉冲个数
    //发送脉冲
    
    pSnd[nRet++] = 0;

	return nRet;	
}


/*
*****************************************************************************
* 函数名: Gw3761LoginProc
* 输　入: 

* 输  出: 
* 返  回: 
*		0成功，-1失败
*		
*		
* 功  能: 
*****************************************************************************
*/
INT32S Gw3761LoginProc(INT16U nPn, INT8U nFn, INT8U* pRcv, INT32S nRcvlen, INT8U* pSnd, INT32S nSndlen)
{
	INT32S nDataLen 	= 0;
	INT32S nRet			= 0;
	
	if (0 != nPn)
	{
		return -1;
	}
	if ((NULL == pRcv) || (NULL == pSnd))
	{
		return -1;
	}
    if (GB3761PnFn2DADT(nPn, nFn, &pSnd[nDataLen]) < 0)
    {
        return -1;
    }
    nDataLen += 4;
	
	switch(nFn)
	{
        case F1:		//数据转发
			nRet = Gw3761LoginF1Proc(pRcv, nRcvlen, &pSnd[nDataLen], nSndlen - nDataLen);
			break;
		default:
          
			return -1;
	}
	if (nRet < 0)
	{
		pSnd[nDataLen++] = 0;
		return nDataLen;
	}
	return (nDataLen + nRet);
}



/*
*****************************************************************************
* 函数名: 置IO口线
* 输　入: 

* 输  出: 
* 返  回: 
*		0成功，-1失败
*		
*		
* 功  能: SetIoStatus
*****************************************************************************
*/
void SetIoStatus(void)
{
    //将待检测的输出口线全部置高
    
    SET_IO(0x24, 1);
    
}

/*
*****************************************************************************
* 函数名: 清IO口线
* 输　入: 

* 输  出: 
* 返  回: 
*		0成功，-1失败
*		
*		
* 功  能: ClrIoStatus
*****************************************************************************
*/
void ClrIoStatus(void)
{
    //将待检测的输出口线全部置低
    
    SET_IO(0x24, 0);
}


/*
*****************************************************************************
* 函数名: 读IO口线
* 输　入: 

* 输  出: 
* 返  回: 
*		0成功，-1失败
*		
*		
* 功  能: RdOutIoStatus
*****************************************************************************
*/
void RdOutIoStatus(void)
{
    INT8U       i    = 0;
    INT8U       nRet    = 0;
    
    memset(&g_nIoBuf[0], 0, sizeof(g_nIoBuf));
    
    if (g_nIoSetFlg == 1)       //置高后来读取，应该都为高，否则置相应标志位
    {
        for (i = 0; i < 20; i++)
        {
            nRet = ReadCpuIoStatusEX(0x24 + i);
            if (nRet == 0)
            {
                SetBufBit(&g_nIoBuf[0], sizeof(g_nIoBuf), i);
            }
        }
    }
    else if (g_nIoSetFlg == 2)  
    {
        for (i = 0; i < 20; i++)
        {
            nRet = ReadCpuIoStatusEX(0x24 + i);
            if (nRet == 1)
            {
                SetBufBit(&g_nIoBuf[0], sizeof(g_nIoBuf), i);
            }
        }
    }
}


/*
*****************************************************************************
* 函数名: 读IO口线
* 输　入: 

* 输  出: 
* 返  回: 
*		0成功，-1失败
*		
*		
* 功  能: RdInIoStatus
*****************************************************************************
*/
void RdInIoStatus(void)
{
    INT8U       i    = 0;
    INT8U       nRet    = 0;
    
    memset(&g_nIoBuf[0], 0, sizeof(g_nIoBuf));
    
    //需要传递命令,来确定判断的依据
    for (i = 0; i < 20; i++)
    {
        nRet = ReadCpuIoStatusEX(0x26 + i);                //输入口线
        if (nRet == 0)
        {
            SetBufBit(&g_nIoBuf[0], sizeof(g_nIoBuf), i);
        }
    }
}


INT8U PlusProc(void)
{
    INT8U   i = 0;
    INT8U   nIo[5] = {0};

    for (i = 0; i < 5; i++)
    {
        nIo[i] =  ReadCpuIoStatusEX(0x40 + i);
    }

    //第一次置位工装板后读取口子状态，应该全为0，不为0置上标志位
    if (g_nPlusCnt == 1)
    {
        for (i = 0; i < 5; i++)
        {
            if (nIo[i] != 0)
            {
                SetBufBit(&g_nPlusValue, 1, i);
            }
        }
    }
    else
    {
        for (i = 0; i < 5; i++)
        {
            if (nIo[i] != 1)
            {
                SetBufBit(&g_nPlusValue, 1, i);
            }
        }
    }
    return 0;

}

void KeyTestProc(INT8U nKeyVal)
{
    if (nKeyVal == KEY_UP)
    {
        SetBufBit(&g_nKeyValue, 1, 0);
    }
    
    if (nKeyVal == KEY_DOWN)
    {
        SetBufBit(&g_nKeyValue, 1, 1);
    }
    
    if (nKeyVal == KEY_LEFT)
    {
        SetBufBit(&g_nKeyValue, 1, 2);
    }
    
    if (nKeyVal == KEY_RIGHT)
    {
        SetBufBit(&g_nKeyValue, 1, 3);
    }
    
    if (nKeyVal == KEY_ENTER)
    {
        SetBufBit(&g_nKeyValue, 1, 4);
    }
    
    if (nKeyVal == KEY_CANCEL)
    {
        SetBufBit(&g_nKeyValue, 1, 5);
    }
}





